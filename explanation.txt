1. run the script "bootstrap.sh" by typing "(project_dir)$ .bootstrap.sh" on shell.
   a. "bootstrap.sh" run functions from "scripts/functions.sh".
      1. "scripts/functions.sh" run "docker-compose stop" command to clear out old containers.
      2. "scripts/functions.sh" run "docker-compose build" command to setup new containers
         based on "Dockerfile" and "docker-compose.yml".
         a. "Dockerfile"
            1. install python, run updates for packages and install shellcheck.
            2. run "install_dependencies.sh".
               a. "install_dependencies.sh" install all the required dependencies (packages)
                   listed in "requirements.txt".
         b. "docker-compose.yml"
            1. create "app" container that uses the configuration of the corresponding service
               name "app" from the "docker/docker-compose.common.yml" file.
               a. "docker/docker-compose.common.yml" runs the "scripts/start_app.sh" that
                  starts the python application.


** "manage.py" and files under the "na_wai_backend" directory are generated by running the
   "django-admin startproject na_wai_backend" command. 
   - once the command is run, a "na_wai_backend" folder will be created in the current
     directory and inside the "na_wai_backend" folder with have a "manage.py" file and a
     "na_wai_backend" folder that contains the "__init__.py", "settings.py", "urls.py" and
     "wsgi.py" files.
   - cut and paste everything from the parent "na_wai_backend" folder to the project directory
     so that "Dockerfile", "manage.py" and the "na_wai_backend" sub-folder are in the same
     directory.
     - delete the empty "na_wai_backend" folder"
